profs = read.csv("profs_cleaned.csv", stringsAsFactors = F)
setwd("~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP")
profs = read.csv("profs_cleaned.csv", stringsAsFactors = F)
x
x = as.data.frame(table(profs$overall_score, profs$difficulty_score, profs$sex))
x
library(ggplot2)
library(dplyr)
ggplot(x, aes(x = Var2, y = Var1)) + geom_tile(aes(fill = Freq)) +
stat_sum(inherit.aes = F, aes(x = Var2, y = Var1, color = Var3, label = paste(round(..prop.. * 100, 1))),
size = 4, geom = "text", position = position_dodge(width = 0.8)) +
scale_color_manual(values = c("red", "orange"))
names(x) = c("y-axis", "x-axis", "sex", "Freq")
x
x = as.data.frame(table(profs$overall_score, profs$difficulty_score))
x
x
hi
hi
x
1
"hi"
library(PASWR)
titanic3
sapply(titanic3, function(y) sum(is.na(y))))
sapply(titanic3, function(y) sum(is.na(y)))
sapply(titanic3, function(y) sum(is.na(y))/nrow(y))
sapply(titanic3, function(x) sum(is.na(x))/nrow())
sapply(titanic3, function(x) sum(is.na(x))/nrow(titanic3))
# 1a, 1b
sapply(titanic3, function(x) sum(is.na(x)))
sapply(titanic3, function(x) sum(is.na(x))/nrow(titanic3))
sum(is.na(titanic3))
dim(titanic3)
sum(is.na(titanic3))/(dim(titanic3)[1] * dim(titanic3[2]))
sum(is.na(titanic3))/(dim(titanic3)[1] * dim(titanic3[2]))
sum(is.na(titanic3))
(dim(titanic3)[1] * dim(titanic3[2]))
dim(titanic3[1])
dim(titanic3[[1]])
dim(titanic3)
class(dim(titanic3))
dim(titanic3)
sum(is.na(titanic3))/(1309*14)
dim(titanic3)
sum(is.na(titanic3))
sum(is.na(titanic3))/(1309*14)
complete.cases(titanic3)
titanci3[complete.cases(titanic3), ]
titanic3[complete.cases(titanic3), ]
nrow(titanic3[complete.cases(titanic3), ])
nrow(titanic3[complete.cases(titanic3), ])/nrow(titanic3)
nrow(titanic3[complete.cases(titanic3), ]) #--> 119
nrow(titanic3[complete.cases(titanic3), ])/nrow(titanic3)
titanic3[complete.cases(titanic3), ]
titanic3[!complete.cases(titanic3), ]
nrow(titanic3[!complete.cases(titanic3), ]) #--> 119
nrow(titanic3[!complete.cases(titanic3), ])/nrow(titanic3) # --> 0.090909
library(VIM)
aggr(titanic3, plot = F)
aggr(titanic3, plot = F)
aggr(titanic3)
library(mice)
md.pattern(titanic3)
md.pattern(titanic3)
# 3
sum(is.na(titanic3)) # --> 1452
# dim(titanic3) --> 1309 by 14
sum(is.na(titanic3))/(1309*14) # --> 0.07923
# 2
# complete.cases returns Logical for rows with ZERO missing values
nrow(titanic3[!complete.cases(titanic3), ]) #--> 1190
# 2a
nrow(titanic3[!complete.cases(titanic3), ])/nrow(titanic3) # --> 0.90909
# 1a, 1b
sapply(titanic3, function(x) sum(is.na(x)))
sapply(titanic3, function(x) sum(is.na(x))/nrow(titanic3))
# library(VIM)
aggr(titanic3, plot = F)
aggr(titanic3)
library(ggplot2)
library(dplyr)
ggplot(titanic3, aes(x = age)) + geom_histogram()
titanic3[is.na(titani3$age), ]
titanic3[is.na(titanic3$age), ]
titanic3[is.na(titanic3$age), ]$age == mean(titanic3$age)
titanic3[is.na(titanic3$age), ]$age = mean(titanic3$age)
ggplot(titanic3, aes(x = age)) + geom_histogram()
ggplot(titanic3, aes(x = age)) + geom_histogram()
titanic3[is.na(titanic3$age), ]$age# = mean(titanic3$age)
titanic3[is.na(titanic3$age), ]# = mean(titanic3$age)
x = titanic3
x[is.na(x$age), ]$age = mean(x$age)
ggplot(x, aes(x = age)) + geom_histogram()
x[is.na(x$age), ]#$age = mean(x$age)
mean(x$age)
x[is.na(x$age), ]$age = mean(x$age, na.rm = T)
ggplot(x, aes(x = age)) + geom_histogram()
library(Hmisc)
z = titanic3
z$age = impute(z$age, "random")
ggplot(titanic3, aes(x = age)) + geom_histogram()
ggplot(z, aes(x = age)) + geom_histogram()
z$age
ggplot(titanic3, aes(x = age)) + geom_histogram()
ggplot(z, aes(x = age)) + geom_histogram()
ggplot(z, aes(x = age)) + geom_histogram()
ggplot(titanic3, aes(x = age)) + geom_histogram()
ggplot(titanic3, aes(x = age)) + geom_histogram()
ggplot(z, aes(x = age)) + geom_histogram()
library(Hmisc)
# 1.7
x = titanic3
x$age = impute(z$age, "random")
ggplot(titanic3, aes(x = age)) + geom_histogram()
ggplot(x, aes(x = age)) + geom_histogram()
# shape is similar, but can amplify outliers
ggplot(titanic3, aes(x = age)) + geom_histogram()
ggplot(x, aes(x = age)) + geom_histogram()
x[is.na(x$fare)]
x[is.na(x$fare), ]
x$fare = impute(z$fare, "random")
x[1226]
x$fare = impute(z$fare, "random")
x[1226]
x[1226,]
x = titanic3
x[is.na(x$fare), ] # --> 1226
x$fare = impute(z$fare, "random")
x[1226,]
x = titanic3
x[is.na(x$fare), ] # --> 1226
x$fare = impute(z$fare, "random")
x[1226,]
# 2.
x = titanic3
age_impute = impute(z$age, "random")
fare_impute = impute(z$fare, "random")
plot(age_impute, fare_impute)
plot(fare_impute, age_impute)
ggplot(x, aes(x = age, y = fare)) + geom_point(aes(color = pclass))
# 2.
x = titanic3
x$age = impute(x$age, "random")
x$fare = impute(x$fare, "random")
ggplot(x, aes(x = age, y = fare)) + geom_point(aes(color = pclass))
ggplot(titanic3, aes(x = age, y = fare)) + geom_point(aes(color = pclass))
# 2.
x = titanic3
x$age = impute(x$age, "random")
x$fare = impute(x$fare, "random")
ggplot(titanic3, aes(x = age, y = fare)) + geom_point(aes(color = pclass))
ggplot(x, aes(x = age, y = fare)) + geom_point(aes(color = pclass))
ggplot(x, aes(x = age, y = fare)) + geom_point(aes(color = pclass)) + geom_smooth(method = "lm")
ggplot(x, aes(x = age, y = fare)) + geom_point(aes(color = pclass)) + geom_smooth(aes(color = pclass)method = "lm")
ggplot(x, aes(x = age, y = fare, color = pclass)) + geom_point() + geom_smooth(aes(color = pclass), method = "lm")
ggplot(titanic3, aes(x = age, y = fare)) + geom_point(aes(color = pclass))
ggplot(titanic3, aes(x = age, y = fare)) + geom_point(aes(color = pclass)) +
geom_point(inherit.aes = F, aes(x = 50, y = 400))
ggplot(titanic3, aes(x = age, y = fare)) + geom_point(aes(color = pclass)) +
geom_point(inherit.aes = F, aes(x = 50, y = 400)) +
geom_point(inherit.aes = F, aes(x = 10, y = 100))
titanic3[1, ]
new = titanic3[1, ]
titanic3[1, ]
titanic3[, c("age", "fare", "pclass")]
new = titanic3[, c("age", "fare", "pclass")]
points = data.frame(age = c(50,10), fare = c(400, 100), pclass = c(NA, NA))
new = rbind(new, points)
new
new[1311, ]
imputed.1nn = kNN(new, k = 1)
imputed.1nn
imputed.1nn[imputed.1nn$pclass == T, ]
imputed.1nn = kNN(new, k = 1)
imputed.1nn[imputed.1nn$pclass == T, ]
imputed.1nn[1311]
new
new[1311]
new[1311, ]
imputed.1nn[1311, ]
imputed.1nn[imputed.1nn$pclass_imp = T, ]
imputed.1nn[imputed.1nn$pclass_imp == T, ]
new = titanic3[, c("age", "fare", "pclass")]
points = data.frame(age = c(50,10), fare = c(400, 100), pclass = c(NA, NA))
new = rbind(new, points)
imputed.sqrt = kNN(new, k = sqrt(nrow(new)))
imputed.1nn[imputed.1nn$pclass_imp == T, ] # --> first class for both
sqrt(nrow(new))
imputed.sqrt = kNN(new, k = 37)
imputed.1nn[imputed.1nn$pclass_imp == T, ] # --> first class for both
imputed.sqrt = kNN(new, k = 36)
imputed.1nn[imputed.1nn$pclass_imp == T, ] # --> first class for both
new = titanic3[, c("age", "fare", "pclass")]
points = data.frame(age = c(50,10), fare = c(400, 100), pclass = c(NA, NA))
new = rbind(new, points)
sqrt(nrow(new))
imputed.sqrt = kNN(new, k = 45)
imputed.1nn[imputed.1nn$pclass_imp == T, ] # --> first class for both
new = titanic3[, c("age", "fare", "pclass")]
points = data.frame(age = c(50,10), fare = c(400, 100), pclass = c(NA, NA))
new = rbind(new, points)
sqrt(nrow(new))
imputed.sqrt = kNN(new, k = 25)
imputed.1nn[imputed.1nn$pclass_imp == T, ] # --> first class for both
new = titanic3[, c("age", "fare", "pclass")]
points = data.frame(age = c(50,10), fare = c(400, 100), pclass = c(NA, NA))
new = rbind(new, points)
sqrt(nrow(new))
imputed.sqrt = kNN(new, k = 50)
imputed.1nn[imputed.1nn$pclass_imp == T, ] # --> first class for both
new[1310:1311]
new[1310:1311, ]
new = titanic3[, c("age", "fare", "pclass")]
points = data.frame(age = c(50,10), fare = c(400, 100), pclass = c(NA, NA))
new = rbind(new, points)
new[1310:1311, ]
imputed.sqrt = kNN(new, k = 36)
imputed.sqrt[imputed.sqrt$pclass_imp == T, ] # --> first class for both
new = titanic3[, c("age", "fare", "pclass")]
points = data.frame(age = c(50,10), fare = c(400, 100), pclass = c(NA, NA))
new = rbind(new, points)
new[1310:1311, ]
imputed.sqrt = kNN(new, k = sqrt(nrow(new)))
imputed.sqrt[imputed.sqrt$pclass_imp == T, ] # --> first class for both
new = titanic3[, c("pclass", "survived", "sex", "age", "sibsp", "parch")]
new
new$fare = impute(new$fare, "random")
fare = impute(new$fare, "random")
new$fare = fare
new
fare
fare = impute(new$fare, "random")
z = titanic3
x = impute(z$fare, "random")
x
new$fare = x
new
new = titanic3[, c("pclass", "survived", "sex", "age", "sibsp", "parch")]
new$fare = impute(titanic3$fare, "random")
new
new[complete.cases(new), ]
# 3.2
complete = new[complete.cases(new), ]
incomplete = new[!complete.cases(new), ]
nrow(complete) + nrow(incomplete)
new[is.na(new$age), ]
# 3.2
complete = new[complete.cases(new), ]
age_missing = new[is.na(new$age), ]
new[is.na(new$age), ]
new[!is.na(new$age), ]
complete =
new[!complete.cases(new), ]
new[!complete.cases(new), ]
new[!complete.cases(new), ]
new[complete.cases(new), ]
new[!is.na(new$age), ]
new[is.na(new$age), ]
new[complete.cases(new), ]
new[is.na(new$age), ]
new[is.na(new$age), ][, -"age"]
new[is.na(new$age), ][, -("age")]
new[is.na(new$age), ]
new[is.na(new$age), ][, -4]
new[complete.cases(new), ]
new[complete.cases(new), ]
new[!complete.cases(new), ]
# 3.2
complete = new[complete.cases(new), ]
incomplete = new[!complete.cases(new), ][, -4]
titanic.manhattan = kknn(age ~ ., complete, incomplete, k = 12, distance = 1)
library(kknn)
titanic.manhattan = kknn(age ~ ., complete, incomplete, k = 12, distance = 1)
summary(iris.manhattan)
summary(titanic.manhattan)
titanic.manhattan
titanic.manhattan
titanic.manhattan
summary(titanic.manhattan)
# 3.3
library(kknn)
titanic.manhattan = kknn(age ~ ., complete, incomplete, k = 12, distance = 1)
summary(titanic.manhattan)
complete = iris.example[-missing.vector, ] # training
missing.vector = c(41:50, 91:100, 141:150) #Inducing missing values on the Species
iris.example$Species[missing.vector] = NA  #vector for each category.
iris.example = iris[, c(1, 2, 5)]
missing.vector = c(41:50, 91:100, 141:150) #Inducing missing values on the Species
iris.example$Species[missing.vector] = NA  #vector for each category.
iris.example
complete = iris.example[-missing.vector, ] # training
missing = iris.example[missing.vector, -3] # testing
#Distance corresponds to the Minkowski power.
# want to predict species based on all other columns: Species ~ .
iris.euclidean = kknn(Species ~ ., complete, missing, k = 12, distance = 2)
summary(iris.euclidean)
iris.example = iris[, c(1, 2, 5)]
missing.vector = c(41:50, 91:100, 141:150) #Inducing missing values on the Species
iris.example$Species[missing.vector] = NA  #vector for each category.
complete = iris.example[-missing.vector, ] # training
missing = iris.example[missing.vector, -3] # testing
#Distance corresponds to the Minkowski power.
# want to predict species based on all other columns: Species ~ .
iris.euclidean = kknn(Species ~ ., complete, missing, k = 12, distance = 2)
summary(iris.euclidean)
titanic.manhattan = kknn(age ~ ., complete, incomplete, k = 12, distance = 1)
iris.example
# 3.2
complete = new[complete.cases(new), ]
incomplete = new[!complete.cases(new), ][, -4]
# 3.3
# library(kknn)
titanic.manhattan = kknn(age ~ ., complete, incomplete, k = 12, distance = 1)
summary(titanic.manhattan)
summary(titanic.manhattan)
# 3.3
# library(kknn)
titanic.manhattan = kknn(age ~ ., complete, incomplete, k = 12, distance = 2)
summary(titanic.manhattan)
iris.euclidean
summary(kknn(age ~ ., complete, incomplete, k = 12, distance = 2))
summary(titanic.manhattan)
incomplete
complete
complete
complete
incomplete
summary(age.euclidean = kknn(age ~ ., complete, incomplete, k = 1, distance = 2))
summary(kknn(age ~ ., complete, incomplete, k = 1, distance = 2))
summary(kknn(age ~ ., complete, incomplete, k = 1, distance = 1))
summary(kknn(age.mink10 = kknn(age ~ ., complete, incomplete, k = 1, distance = 10))
summary(kknn(age ~ ., complete, incomplete, k = 1, distance = 10))
summary(kknn(age ~ ., complete, incomplete, k = 1, distance = 10))
summary(summary(kknn(age ~ ., complete, incomplete, k = 1, distance = 2)))
complete = new[complete.cases(new), ]
complete
incomplete
titanic3_new = titanic3[,c('pclass', 'survived', 'sex', 'age', 'sibsp', 'parch', 'fare')]
# 3.2
complete = titanic3_new[complete.cases(titanic3_new),]
missing = titanic3_new[is.na(titanic3_new$age),-4]
# 3.3
library(kknn)
titanic3.manhattan = kknn(age ~ ., complete, missing, k = 1, distance = 1)
titanic3.euclidean = kknn(age ~ ., complete, missing, k = 1, distance = 2)
titanic3.minkowski = kknn(age ~ ., complete, missing, k = 1, distance = 12)
new = titanic3[,c('pclass', 'survived', 'sex', 'age', 'sibsp', 'parch', 'fare')]
# 3.2
complete = new[complete.cases(new), ]
missing = new[is.na(new$age), -4]
# 3.3
library(kknn)
titanic3.manhattan = kknn(age ~ ., complete, missing, k = 1, distance = 1)
titanic3.euclidean = kknn(age ~ ., complete, missing, k = 1, distance = 2)
titanic3.minkowski = kknn(age ~ ., complete, missing, k = 1, distance = 12)
new = titanic3[,c('pclass', 'survived', 'sex', 'age', 'sibsp', 'parch', 'fare')]
# 3.2
complete = new[complete.cases(new), ]
missing = new[is.na(new$age), -4]
# 3.3
library(kknn)
new.manhattan = kknn(age ~ ., complete, missing, k = 1, distance = 1)
new.euclidean = kknn(age ~ ., complete, missing, k = 1, distance = 2)
new.minkowski = kknn(age ~ ., complete, missing, k = 1, distance = 12)
summary(new.manhattan)
# 3.3
# library(kknn)
summary(kknn(age ~ ., complete, incomplete, k = 12, distance = 2))
summary(titanic.manhattan)
summary(kknn(age ~ ., complete, incomplete, k = 1, distance = 2))
summary(kknn(age ~ ., complete, incomplete, k = 1, distance = 1))
summary(kknn(age ~ ., complete, incomplete, k = 1, distance = 10))
# 3.3
# library(kknn)
new.man = kknn(age ~ ., complete, incomplete, k = 1, distance = 2)
new.euc = kknn(age ~ ., complete, incomplete, k = 1, distance = 1)
new.mink = kknn(age ~ ., complete, incomplete, k = 1, distance = 10)
ggplot() +
geom_density(aes(x = new$age))
ggplot() +
geom_density(aes(x = new$age, color = "red", alpha = 0.3)
ggplot() +
ggplot() +
geom_density(aes(x = new$age, fill = "red", alpha = 0.3))
ggplot() +
geom_density(aes(x = new$age, fill = "original", alpha = 0.3))
ggplot() +
geom_density(aes(x = new$age, fill = "original", alpha = 0.3)) +
geom_density(aes(x = new.euc$fitted.values, fill = "euc", alpha = 0.3))
ggplot() +
geom_density(aes(x = new$age, fill = "original", alpha = 0.3)) +
geom_density(aes(x = new.euc$fitted.values, fill = "euc", alpha = 0.3)) +
geom_density(aes(x = new.man$fitted.values, fill = "man", alpha = 0.3)) +
geom_density(aes(x = new.mink$fitted.values, fill = "mink", alpha = 0.3))
new.man = kknn(age ~ ., complete, incomplete, k = sqrt(nrow(new)), distance = 2)
sqrt(nrow(new))
new.man = kknn(age ~ ., complete, incomplete, k = 36, distance = 2)
new.euc = kknn(age ~ ., complete, incomplete, k = 36, distance = 1)
new.mink = kknn(age ~ ., complete, incomplete, k = 36, distance = 10)
ggplot() +
geom_density(aes(x = new$age, fill = "original", alpha = 0.3)) +
geom_density(aes(x = new.euc$fitted.values, fill = "euc", alpha = 0.3)) +
geom_density(aes(x = new.man$fitted.values, fill = "man", alpha = 0.3)) +
geom_density(aes(x = new.mink$fitted.values, fill = "mink", alpha = 0.3))
